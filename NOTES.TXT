
  const template = document.querySelector("#photoPopUp").content;
  const fragment = document.createDocumentFragment();
  
console.log(template)

  const newImgPopup = document.querySelector(".photo-popup__image");
  newImgPopup.src = document.querySelector(".popUpPhoto").getAttribute('src');
  newImgPopup.alt = document.querySelector(".popUpPhoto").getAttribute('alt');

  const newTitlePopup = document.querySelector(".photo-popup__title");
  newTitlePopup.textContent = document.querySelector(".popUpPhoto").getAttribute('alt');

  const clone = template.cloneNode(true);
  fragment.appendChild(clone)

  openPhotoPopUp.appendChild(newImgPopup);
  openPhotoPopUp.appendChild(newTitlePopup);


/*   enter.addEventListener('enter', (e) => {
    console.log(`Key "${e.key}" pressed [event: keydown]`);
  }) */
  

  //funciona OK
function handleDeleteCard(e){ 
  //TODO ESTE BLOQUE, ES LO MISMO QUE LA LINEA 32
  /*   cards.forEach((card) => {
      e.target.classList.add("deletedCard");
    })
    const deletedCard = document.querySelector(".deletedCard");
    const toRemoveCard = deletedCard.parentNode.parentNode;
    toRemoveCard.remove(); */
    e.target.parentNode.parentNode.remove();
  /*  */
  
  }




function createCard(name,link){
  const newCard = document.createElement("article");
  newCard.classList.add("card");

  const newSectionPhoto = document.createElement("section")
  newSectionPhoto.className = "card__photo";

  const newButtonDelete = document.createElement("button");
  newButtonDelete.className = "button-delete";
  newButtonDelete.addEventListener("click", handleDeleteCard);

  const newImg = document.createElement("img");
  newImg.src = link;
  newImg.alt = name;
  newImg.className = "card__image";
  newImg.dataset.target = "#photoPopUp";
  newImg.addEventListener("click", handleOpenPhoto);

  const newSectionName = document.createElement("section")
  newSectionName.className = "card__name";

  const newTitle = document.createElement("h3");
  newTitle.className = "card__title";
  newTitle.textContent = name;

  const newButtonLike = document.createElement("button");
  newButtonLike.className = "button-like";
  newButtonLike.addEventListener("click", handleLikeCard);

  newCard.appendChild(newSectionPhoto);
  newSectionPhoto.appendChild(newButtonDelete);
  newSectionPhoto.appendChild(newImg);
  newCard.appendChild(newSectionName);
  newSectionName.appendChild(newTitle);
  newSectionName.appendChild(newButtonLike);

  return newCard;
}



________________

/* const formElement = document.querySelector(".form")
const formInput = formElement.querySelector(".modal__input")

console.log(formInput.id)

const showInputError = () => {

}

const hideInputError = () => {

}

const isValid = () => {
  
} */

 // Selecciona todos los elementos del formulario necesarios y los asigna a las constantes
/*const formElement = document.querySelector(".add-place__form");
const inputElement = formElement.querySelector(".form__input");

// Selecciona cada elemento del mensaje de error utilizando su nombre de clase único
const formError = formElement.querySelector(`.${inputElement.id}-error`);
 */




const showInputError = (formElement, inputElement, errorMessage) => {
  // Encuentra el elemento del mensaje de error dentro de la propia función
  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);
  // El resto permanece intacto
  inputElement.classList.add("form__input_type_error");
  errorElement.textContent = errorMessage;
  console.log(errorMessage)
  errorElement.classList.add("form__input-error_active");
};

const hideInputError = (formElement, inputElement) => {
  // Encuentra el elemento del mensaje de error
  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);
  // El resto permanece intacto
  inputElement.classList.remove("form__input_type_error");
  errorElement.classList.remove("form__input-error_active");
  errorElement.textContent = "";
};

const isValid = (formElement, inputElement) => {
  if (!inputElement.validity.valid) {
    // El parámetro de showInputError() es ahora un formulario
    // que contiene un campo a comprobar
    console.log(inputElement.validationMessage)
    showInputError(formElement, inputElement, inputElement.validationMessage);
  } else {
    // Lo mismo para hideInputError(), su parámetro es ahora un formulario
    // que contiene un campo a comprobar
    hideInputError(formElement, inputElement);
  }
};

formElement.addEventListener("submit", function (evt) {
  // Cancela la acción del navegador por defecto, de modo que al hacer clic en el botón "Enviar" no se actualice la página
  evt.preventDefault();
  console.log("formulario enviado")
});

const setEventListeners = (formElement) => {
  // Encuentra todos los campos dentro del formulario y
  // crea un array a partir de estos, utilizando el método Array.from()
  const inputList = Array.from(formElement.querySelectorAll(".form__input"));

  // Itera sobre el array obtenido
  inputList.forEach((inputElement) => {
    // agrega el controlador de eventos de entrada a cada campo
    inputElement.addEventListener("input", () => {
      // Llama a la función isValid() dentro del callback
      // y pásale el formulario y el elemento a comprobar
      isValid(formElement, inputElement)
    });
  });
};

const enableValidation = () => {
  // Encontrará todos los formularios con la clase especificada en el DOM y
  // creará un array, a partir de estos, utilizando el método Array.from()
  const formList = Array.from(document.querySelectorAll(".form"));

  // Itera sobre el array obtenido
  formList.forEach((formElement) => {
    formElement.addEventListener("submit", (evt) => {
      // Cancela el comportamiento por defecto de cada formulario
      evt.preventDefault();
    });

    // Llama a la función setEventListeners() para cada formulario
    // tomando un elemento del formulario como argumento
    setEventListeners(formElement);
  });
};

// Llama a la función
enableValidation();